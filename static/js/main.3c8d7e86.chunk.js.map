{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","ok","Error","json","result","catch","error","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuild","Date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLACMA,EACA,mCADAA,EAEC,0CAmFQC,MAhFf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNC,EADM,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAENG,EAFM,KAEEC,EAFF,KAqCb,OACE,qBAAKC,UACqB,qBAAhBF,EAAQG,MACbH,EAAQG,KAAKC,KAAK,GACrB,WACC,MAJH,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAET,EAASS,EAAEC,OAAOC,QAC/BA,MAAOZ,EACPa,WAhDG,SAACC,GACC,UAAVA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GACJ,IAAIA,EAAIC,GACN,MAAMC,MAAM,8BAEd,OAAOF,EAAIG,UAEZJ,MAAK,SAAAK,GACJnB,EAAWmB,GACXrB,EAAS,OAETsB,OAAM,SAAAC,GACNC,QAAQC,IAAIF,WAsCa,qBAAhBtB,EAAQG,KACjB,8BAEE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQyB,KAAnC,IAA0CzB,EAAQ0B,IAAIC,WACtD,qBAAKzB,UAAU,OAAf,SApCM,SAAC0B,GACf,IAEIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACjED,EAAEE,UACXC,EAAKH,EAAEI,UACPC,EAJS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAI3GL,EAAEM,YACfC,EAAKP,EAAEQ,cAEX,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA4BHE,CAAU,IAAIC,QACrC,sBAAKpC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGF,EAAQG,KAAKC,KADhB,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,eAMtB,SCnECoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3c8d7e86.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst api={\n  key:\"5fdbcc192bb7ee12f3b6ff685595b56c\",\n  base:\"http://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query,setQuery]=useState('');\n  const [weather,setWeather]=useState({});\n\n  const search=(evt)=>{\n    if(evt.key===\"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n      .then(res=>{\n        if(!res.ok){\n          throw Error('problem fetching that data');\n        }\n        return res.json();\n      })\n      .then(result=>{\n        setWeather(result);\n        setQuery('');\n      }\n      ).catch(error=>{\n        console.log(error);\n      });\n      \n    }\n  }\n\n\n  const dateBuild=(d)=>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day=days[d.getDay()];\n    let date=d.getDate();\n    let month=months[d.getMonth()];\n    let year=d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n    \n  }\n\n  return (\n    <div className={\n      (typeof weather.main !==\"undefined\")\n      ?((weather.main.temp>17)?\n      'app warm':'app')\n      :'app'\n    }>\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search....\"\n            onChange={e=>setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n\n        {(typeof weather.main !==\"undefined\")?(\n        <div>\n\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name},{weather.sys.country}</div>\n            <div className=\"date\">{dateBuild(new Date())}</div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {weather.main.temp}Â°c\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].main}\n              </div>\n            </div>\n\n          </div>\n        </div>\n          ): ('') }\n\n     </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}